// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TerserPlugin buildError method 1`] = `
[Error: test.js from Terser
Message]
`;

exports[`TerserPlugin buildError method 2`] = `
[Error: test.js from Terser
Message [test.js:1,1]]
`;

exports[`TerserPlugin buildError method 3`] = `
[Error: test.js from Terser
Message [http://example.com/www/js/one.js:1,1][test.js:1,1]]
`;

exports[`TerserPlugin buildError method 4`] = `
[Error: test.js from Terser
Stack]
`;

exports[`TerserPlugin buildWarning method 1`] = `"Terser Plugin: Warning [test.js:1,1]"`;

exports[`TerserPlugin buildWarning method 2`] = `"Terser Plugin: Warning [test.js:1,1]"`;

exports[`TerserPlugin buildWarning method 3`] = `"Terser Plugin: Warning [test.js:1,1]"`;

exports[`TerserPlugin buildWarning method 4`] = `"Terser Plugin: Warning [http://example.com/www/js/one.js:1,1]"`;

exports[`TerserPlugin buildWarning method 5`] = `"Terser Plugin: Warning [http://example.com/www/js/one.js:1,1]"`;

exports[`TerserPlugin buildWarning method 6`] = `null`;

exports[`TerserPlugin should emit an error on a broken code in not parallel mode: assets 1`] = `
Object {
  "broken.js": "\`Broken===",
  "one.js": "(()=>{var r={791:r=>{r.exports=function(){console.log(7)}}},o={};!function t(e){if(o[e])return o[e].exports;var n=o[e]={exports:{}};return r[e](n,n.exports,t),n.exports}(791)})();",
  "two.js": "(()=>{var r={791:r=>{r.exports=function(){console.log(7)}}},o={};!function t(e){if(o[e])return o[e].exports;var n=o[e]={exports:{}};return r[e](n,n.exports,t),n.exports}(791)})();",
}
`;

exports[`TerserPlugin should emit an error on a broken code in not parallel mode: errors 1`] = `
Array [
  "Error: broken.js from Terser
Unterminated template [broken.js:1,0]",
]
`;

exports[`TerserPlugin should emit an error on a broken code in not parallel mode: warnings 1`] = `Array []`;

exports[`TerserPlugin should emit an error on a broken code in parallel mode: assets 1`] = `
Object {
  "broken.js": "\`Broken===",
  "one.js": "(()=>{var r={791:r=>{r.exports=function(){console.log(7)}}},o={};!function t(e){if(o[e])return o[e].exports;var n=o[e]={exports:{}};return r[e](n,n.exports,t),n.exports}(791)})();",
  "two.js": "(()=>{var r={791:r=>{r.exports=function(){console.log(7)}}},o={};!function t(e){if(o[e])return o[e].exports;var n=o[e]={exports:{}};return r[e](n,n.exports,t),n.exports}(791)})();",
}
`;

exports[`TerserPlugin should emit an error on a broken code in parallel mode: errors 1`] = `
Array [
  "Error: broken.js from Terser
Unterminated template [broken.js:1,0]",
]
`;

exports[`TerserPlugin should emit an error on a broken code in parallel mode: warnings 1`] = `Array []`;

exports[`TerserPlugin should regenerate hash: assets 1`] = `
Object {
  "598.598.5d72557de264fa10f306.js": "(window.webpackJsonpterser_webpack_plugin=window.webpackJsonpterser_webpack_plugin||[]).push([[598],{598:(e,p,s)=>{\\"use strict\\";s.r(p),s.d(p,{default:()=>n});const n=\\"async-dep\\"}}]);",
  "AsyncImportExport.4f0bde0b02c99cb3336a.js": "(()=>{\\"use strict\\";var e,r={},t={};function o(e){if(t[e])return t[e].exports;var a=t[e]={exports:{}};return r[e](a,a.exports,o),a.exports}o.m=r,o.d=(e,r)=>{for(var t in r)o.o(r,t)&&!o.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})},o.f={},o.e=e=>Promise.all(Object.keys(o.f).reduce((r,t)=>(o.f[t](e,r),r),[])),o.u=e=>e+\\".\\"+e+\\".5d72557de264fa10f306.js\\",o.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),e={},o.l=(r,t,a)=>{if(e[r])e[r].push(t);else{var n,i;if(void 0!==a)for(var p=document.getElementsByTagName(\\"script\\"),s=0;s<p.length;s++){var u=p[s];if(u.getAttribute(\\"src\\")==r||u.getAttribute(\\"data-webpack\\")==\\"terser-webpack-plugin:\\"+a){n=u;break}}n||(i=!0,(n=document.createElement(\\"script\\")).charset=\\"utf-8\\",n.timeout=120,o.nc&&n.setAttribute(\\"nonce\\",o.nc),n.setAttribute(\\"data-webpack\\",\\"terser-webpack-plugin:\\"+a),n.src=r),e[r]=[t];var d=t=>{d=()=>{},n.onerror=n.onload=null,clearTimeout(l);var o=e[r];delete e[r],n.parentNode&&n.parentNode.removeChild(n),o&&o.forEach(e=>e(t))},l=setTimeout(()=>{d({type:\\"timeout\\",target:n})},12e4);n.onerror=n.onload=d,i&&document.head.appendChild(n)}},o.r=e=>{\\"undefined\\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\\"Module\\"}),Object.defineProperty(e,\\"__esModule\\",{value:!0})},o.p=\\"\\",(()=>{var e={988:0};o.f.j=(r,t)=>{var a=o.o(e,r)?e[r]:void 0;if(0!==a)if(a)t.push(a[2]);else{var n=new Promise((t,o)=>{a=e[r]=[t,o]});t.push(a[2]=n);var i=o.p+o.u(r),p=new Error;o.l(i,t=>{if(o.o(e,r)&&(0!==(a=e[r])&&(e[r]=void 0),a)){var n=t&&(\\"load\\"===t.type?\\"missing\\":t.type),i=t&&t.target&&t.target.src;p.message=\\"Loading chunk \\"+r+\\" failed.\\\\n(\\"+n+\\": \\"+i+\\")\\",p.name=\\"ChunkLoadError\\",p.type=n,p.request=i,a[1](p)}},\\"chunk-\\"+r)}};var r=window.webpackJsonpterser_webpack_plugin=window.webpackJsonpterser_webpack_plugin||[],t=r.push.bind(r);r.push=function(r){for(var t,n,i=r[0],p=r[1],s=r[3],u=0,d=[];u<i.length;u++)n=i[u],o.o(e,n)&&e[n]&&d.push(e[n][0]),e[n]=0;for(t in p)o.o(p,t)&&(o.m[t]=p[t]);for(s&&s(o),a&&a(r);d.length;)d.shift()()};var a=t})(),o.e(598).then(o.bind(o,598)).then(()=>{console.log(\\"Good\\")})})();",
  "importExport.c597e72d1fd1a5b91b6d.js": "(()=>{\\"use strict\\"})();",
  "js.12e2a1e4f39d61d6de1b.js": "(()=>{var r={791:r=>{r.exports=function(){console.log(7)}}},o={};!function t(e){if(o[e])return o[e].exports;var n=o[e]={exports:{}};return r[e](n,n.exports,t),n.exports}(791)})();",
  "mjs.ff069f70188e3ab5ecd4.js": "(()=>{var r={631:r=>{r.exports=function(){console.log(7)}}},o={};!function t(e){if(o[e])return o[e].exports;var n=o[e]={exports:{}};return r[e](n,n.exports,t),n.exports}(631)})();",
}
`;

exports[`TerserPlugin should regenerate hash: errors 1`] = `Array []`;

exports[`TerserPlugin should regenerate hash: warnings 1`] = `Array []`;

exports[`TerserPlugin should respect hash options #2: assets 1`] = `
Object {
  "main.js": "(()=>{var r={791:r=>{r.exports=function(){console.log(7)}}},o={};!function t(e){if(o[e])return o[e].exports;var n=o[e]={exports:{}};return r[e](n,n.exports,t),n.exports}(791)})();",
}
`;

exports[`TerserPlugin should respect hash options #2: errors 1`] = `Array []`;

exports[`TerserPlugin should respect hash options #2: warnings 1`] = `Array []`;

exports[`TerserPlugin should respect the hash options #1: assets 1`] = `
Object {
  "main.js": "(()=>{var r={791:r=>{r.exports=function(){console.log(7)}}},o={};!function t(e){if(o[e])return o[e].exports;var n=o[e]={exports:{}};return r[e](n,n.exports,t),n.exports}(791)})();",
}
`;

exports[`TerserPlugin should respect the hash options #1: errors 1`] = `Array []`;

exports[`TerserPlugin should respect the hash options #1: warnings 1`] = `Array []`;

exports[`TerserPlugin should work (without options): assets 1`] = `
Object {
  "main.js": "(()=>{var r={791:r=>{r.exports=function(){console.log(7)}}},o={};!function t(e){if(o[e])return o[e].exports;var n=o[e]={exports:{}};return r[e](n,n.exports,t),n.exports}(791)})();",
}
`;

exports[`TerserPlugin should work (without options): errors 1`] = `Array []`;

exports[`TerserPlugin should work (without options): warnings 1`] = `Array []`;

exports[`TerserPlugin should work and respect "terser" errors (the "parallel" option is "false"): errors 1`] = `
Array [
  "Error: main.js from Terser
Unexpected token name «Object», expected punc «,» [main.js:1,8]",
]
`;

exports[`TerserPlugin should work and respect "terser" errors (the "parallel" option is "false"): warnings 1`] = `Array []`;

exports[`TerserPlugin should work and respect "terser" errors (the "parallel" option is "true"): errors 1`] = `
Array [
  "Error: main.js from Terser
Unexpected token name «Object», expected punc «,» [main.js:1,8]",
]
`;

exports[`TerserPlugin should work and respect "terser" errors (the "parallel" option is "true"): warnings 1`] = `Array []`;

exports[`TerserPlugin should work as a minimizer: assets 1`] = `
Object {
  "main.js": "(()=>{var r={791:r=>{r.exports=function(){console.log(7)}}},o={};!function t(e){if(o[e])return o[e].exports;var n=o[e]={exports:{}};return r[e](n,n.exports,t),n.exports}(791)})();",
}
`;

exports[`TerserPlugin should work as a minimizer: errors 1`] = `Array []`;

exports[`TerserPlugin should work as a minimizer: warnings 1`] = `Array []`;

exports[`TerserPlugin should work as a plugin: assets 1`] = `
Object {
  "main.js": "(()=>{var r={791:r=>{r.exports=function(){console.log(7)}}},o={};!function t(e){if(o[e])return o[e].exports;var n=o[e]={exports:{}};return r[e](n,n.exports,t),n.exports}(791)})();",
}
`;

exports[`TerserPlugin should work as a plugin: errors 1`] = `Array []`;

exports[`TerserPlugin should work as a plugin: warnings 1`] = `Array []`;

exports[`TerserPlugin should work in multi compiler mode with the one plugin and with the same file: assets 1`] = `
Object {
  "main.js": "(()=>{var r={791:r=>{r.exports=function(){console.log(7)}}},o={};!function t(e){if(o[e])return o[e].exports;var n=o[e]={exports:{}};return r[e](n,n.exports,t),n.exports}(791)})();",
}
`;

exports[`TerserPlugin should work in multi compiler mode with the one plugin and with the same file: assets 2`] = `
Object {
  "main.js": "(()=>{var r={791:r=>{r.exports=function(){console.log(7)}}},o={};!function t(e){if(o[e])return o[e].exports;var n=o[e]={exports:{}};return r[e](n,n.exports,t),n.exports}(791)})();",
}
`;

exports[`TerserPlugin should work in multi compiler mode with the one plugin and with the same file: assets 3`] = `
Object {
  "main.js": "(()=>{var r={791:r=>{r.exports=function(){console.log(7)}}},o={};!function t(e){if(o[e])return o[e].exports;var n=o[e]={exports:{}};return r[e](n,n.exports,t),n.exports}(791)})();",
}
`;

exports[`TerserPlugin should work in multi compiler mode with the one plugin and with the same file: assets 4`] = `
Object {
  "main.js": "(()=>{var r={791:r=>{r.exports=function(){console.log(7)}}},o={};!function t(e){if(o[e])return o[e].exports;var n=o[e]={exports:{}};return r[e](n,n.exports,t),n.exports}(791)})();",
}
`;

exports[`TerserPlugin should work in multi compiler mode with the one plugin and with the same file: assets 5`] = `
Object {
  "main.js": "(()=>{var r={791:r=>{r.exports=function(){console.log(7)}}},o={};!function t(e){if(o[e])return o[e].exports;var n=o[e]={exports:{}};return r[e](n,n.exports,t),n.exports}(791)})();",
}
`;

exports[`TerserPlugin should work in multi compiler mode with the one plugin and with the same file: errors 1`] = `Array []`;

exports[`TerserPlugin should work in multi compiler mode with the one plugin and with the same file: errors 2`] = `Array []`;

exports[`TerserPlugin should work in multi compiler mode with the one plugin and with the same file: errors 3`] = `Array []`;

exports[`TerserPlugin should work in multi compiler mode with the one plugin and with the same file: errors 4`] = `Array []`;

exports[`TerserPlugin should work in multi compiler mode with the one plugin and with the same file: errors 5`] = `Array []`;

exports[`TerserPlugin should work in multi compiler mode with the one plugin and with the same file: warnings 1`] = `Array []`;

exports[`TerserPlugin should work in multi compiler mode with the one plugin and with the same file: warnings 2`] = `Array []`;

exports[`TerserPlugin should work in multi compiler mode with the one plugin and with the same file: warnings 3`] = `Array []`;

exports[`TerserPlugin should work in multi compiler mode with the one plugin and with the same file: warnings 4`] = `Array []`;

exports[`TerserPlugin should work in multi compiler mode with the one plugin and with the same file: warnings 5`] = `Array []`;

exports[`TerserPlugin should work in multi compiler mode with the one plugin: assets 1`] = `
Object {
  "main-1.js": "/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 791:
/***/ ((module) => {

// foo
/* @preserve*/
// bar
const a = 2 + 2;

module.exports = function Foo() {
  const b = 2 + 2;
  console.log(b + 1 + 2);
};


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	__webpack_require__(791);
/******/ })()
;",
}
`;

exports[`TerserPlugin should work in multi compiler mode with the one plugin: assets 2`] = `
Object {
  "main-2.js": "(()=>{var r={791:r=>{r.exports=function(){console.log(7)}}},o={};!function t(e){if(o[e])return o[e].exports;var n=o[e]={exports:{}};return r[e](n,n.exports,t),n.exports}(791)})();",
}
`;

exports[`TerserPlugin should work in multi compiler mode with the one plugin: assets 3`] = `
Object {
  "main-3.js": "(()=>{\\"use strict\\"})();",
}
`;

exports[`TerserPlugin should work in multi compiler mode with the one plugin: compiler plugin count 1`] = `
Object {
  "additionalPass": 0,
  "afterCompile": 0,
  "afterDone": 0,
  "afterEmit": 1,
  "afterEnvironment": 0,
  "afterPlugins": 0,
  "afterResolvers": 0,
  "assetEmitted": 0,
  "beforeCompile": 0,
  "beforeRun": 1,
  "compilation": 51,
  "compile": 0,
  "contextModuleFactory": 0,
  "done": 1,
  "emit": 0,
  "entryOption": 1,
  "environment": 0,
  "failed": 0,
  "finishMake": 0,
  "infrastructureLog": 0,
  "initialize": 0,
  "invalid": 1,
  "make": 1,
  "normalModuleFactory": 1,
  "run": 0,
  "shouldEmit": 1,
  "thisCompilation": 5,
  "watchClose": 0,
  "watchRun": 0,
}
`;

exports[`TerserPlugin should work in multi compiler mode with the one plugin: errors 1`] = `Array []`;

exports[`TerserPlugin should work in multi compiler mode with the one plugin: errors 2`] = `Array []`;

exports[`TerserPlugin should work in multi compiler mode with the one plugin: errors 3`] = `Array []`;

exports[`TerserPlugin should work in multi compiler mode with the one plugin: warnings 1`] = `Array []`;

exports[`TerserPlugin should work in multi compiler mode with the one plugin: warnings 2`] = `Array []`;

exports[`TerserPlugin should work in multi compiler mode with the one plugin: warnings 3`] = `Array []`;

exports[`TerserPlugin should work in multi compiler mode: assets 1`] = `
Object {
  "main-1.js": "/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 791:
/***/ ((module) => {

// foo
/* @preserve*/
// bar
const a = 2 + 2;

module.exports = function Foo() {
  const b = 2 + 2;
  console.log(b + 1 + 2);
};


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	__webpack_require__(791);
/******/ })()
;",
}
`;

exports[`TerserPlugin should work in multi compiler mode: assets 2`] = `
Object {
  "main-2.js": "(()=>{var r={791:r=>{r.exports=function(){console.log(7)}}},o={};!function t(e){if(o[e])return o[e].exports;var n=o[e]={exports:{}};return r[e](n,n.exports,t),n.exports}(791)})();",
}
`;

exports[`TerserPlugin should work in multi compiler mode: assets 3`] = `
Object {
  "main-3.js": "(()=>{\\"use strict\\"})();",
}
`;

exports[`TerserPlugin should work in multi compiler mode: compiler plugin count 1`] = `
Object {
  "additionalPass": 0,
  "afterCompile": 0,
  "afterDone": 0,
  "afterEmit": 1,
  "afterEnvironment": 0,
  "afterPlugins": 0,
  "afterResolvers": 0,
  "assetEmitted": 0,
  "beforeCompile": 0,
  "beforeRun": 1,
  "compilation": 51,
  "compile": 0,
  "contextModuleFactory": 0,
  "done": 1,
  "emit": 0,
  "entryOption": 1,
  "environment": 0,
  "failed": 0,
  "finishMake": 0,
  "infrastructureLog": 0,
  "initialize": 0,
  "invalid": 1,
  "make": 1,
  "normalModuleFactory": 1,
  "run": 0,
  "shouldEmit": 1,
  "thisCompilation": 5,
  "watchClose": 0,
  "watchRun": 0,
}
`;

exports[`TerserPlugin should work in multi compiler mode: errors 1`] = `Array []`;

exports[`TerserPlugin should work in multi compiler mode: errors 2`] = `Array []`;

exports[`TerserPlugin should work in multi compiler mode: errors 3`] = `Array []`;

exports[`TerserPlugin should work in multi compiler mode: warnings 1`] = `Array []`;

exports[`TerserPlugin should work in multi compiler mode: warnings 2`] = `Array []`;

exports[`TerserPlugin should work in multi compiler mode: warnings 3`] = `Array []`;

exports[`TerserPlugin should work when some of assets do not contain source maps: assets 1`] = `
Object {
  "extra-file.js": "var a=1;console.log(a);",
  "main.js": "(()=>{var r={336:r=>{r.exports=function(){console.log(7)}}},o={};!function t(e){if(o[e])return o[e].exports;var n=o[e]={exports:{}};return r[e](n,n.exports,t),n.exports}(336)})();
//# sourceMappingURL=main.js.map",
  "main.js.map": "{\\"version\\":3,\\"sources\\":[\\"webpack://terser-webpack-plugin/./test/fixtures/entry.js\\",\\"webpack://terser-webpack-plugin/webpack/bootstrap\\",\\"webpack://terser-webpack-plugin/webpack/startup\\"],\\"names\\":[\\"module\\",\\"exports\\",\\"console\\",\\"log\\",\\"b\\",\\"__webpack_module_cache__\\",\\"__webpack_require__\\",\\"moduleId\\",\\"__webpack_modules__\\"],\\"mappings\\":\\"qBAKAA,EAAOC,QAAU,WAEfC,QAAQC,IAAIC,MCNVC,EAA2B,IAG/B,SAASC,EAAoBC,GAE5B,GAAGF,EAAyBE,GAC3B,OAAOF,EAAyBE,GAAUN,QAG3C,IAAID,EAASK,EAAyBE,GAAY,CAGjDN,QAAS,IAOV,OAHAO,EAAoBD,GAAUP,EAAQA,EAAOC,QAASK,GAG/CN,EAAOC,QCjBfK,CAAoB,M\\",\\"file\\":\\"main.js\\",\\"sourcesContent\\":[\\"// foo\\\\n/* @preserve*/\\\\n// bar\\\\nconst a = 2 + 2;\\\\n\\\\nmodule.exports = function Foo() {\\\\n  const b = 2 + 2;\\\\n  console.log(b + 1 + 2);\\\\n};\\\\n\\",\\"// The module cache\\\\nvar __webpack_module_cache__ = {};\\\\n\\\\n// The require function\\\\nfunction __webpack_require__(moduleId) {\\\\n\\\\t// Check if module is in cache\\\\n\\\\tif(__webpack_module_cache__[moduleId]) {\\\\n\\\\t\\\\treturn __webpack_module_cache__[moduleId].exports;\\\\n\\\\t}\\\\n\\\\t// Create a new module (and put it into the cache)\\\\n\\\\tvar module = __webpack_module_cache__[moduleId] = {\\\\n\\\\t\\\\t// no module.id needed\\\\n\\\\t\\\\t// no module.loaded needed\\\\n\\\\t\\\\texports: {}\\\\n\\\\t};\\\\n\\\\n\\\\t// Execute the module function\\\\n\\\\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\\\\n\\\\n\\\\t// Return the exports of the module\\\\n\\\\treturn module.exports;\\\\n}\\\\n\\\\n\\",\\"// startup\\\\n// Load entry module\\\\n// This entry module is referenced by other modules so it can't be inlined\\\\n__webpack_require__(336);\\\\n\\"],\\"sourceRoot\\":\\"\\"}",
}
`;

exports[`TerserPlugin should work when some of assets do not contain source maps: errors 1`] = `Array []`;

exports[`TerserPlugin should work when some of assets do not contain source maps: warnings 1`] = `Array []`;

exports[`TerserPlugin should work with "asset" module type: assets 1`] = `
Object {
  "emitted.js": "console.log(\\"HERE\\");",
  "main.js": "(()=>{\\"use strict\\";var r,t={484:(r,t,e)=>{r.exports=e.p+\\"emitted.js\\"}},e={};function o(r){if(e[r])return e[r].exports;var s=e[r]={exports:{}};return t[r](s,s.exports,o),s.exports}o.p=\\"\\",r=o(484),console.log(12,r)})();",
}
`;

exports[`TerserPlugin should work with "asset" module type: errors 1`] = `Array []`;

exports[`TerserPlugin should work with "asset" module type: warnings 1`] = `Array []`;

exports[`TerserPlugin should work with "copy-webpack-plugin": assets 1`] = `
Object {
  "copy.js": "var foo=12;console.log(foo);",
  "main.js": "(()=>{var r={791:r=>{r.exports=function(){console.log(7)}}},o={};!function t(e){if(o[e])return o[e].exports;var n=o[e]={exports:{}};return r[e](n,n.exports,t),n.exports}(791)})();",
}
`;

exports[`TerserPlugin should work with "copy-webpack-plugin": errors 1`] = `Array []`;

exports[`TerserPlugin should work with "copy-webpack-plugin": warnings 1`] = `Array []`;

exports[`TerserPlugin should work with "file-loader": assets 1`] = `
Object {
  "main.js": "(()=>{\\"use strict\\";var t={p:\\"\\"};const s=t.p+\\"test/fixtures/emitted.js\\";console.log(12,s)})();",
  "test/fixtures/emitted.js": "console.log(\\"HERE\\");",
}
`;

exports[`TerserPlugin should work with "file-loader": errors 1`] = `Array []`;

exports[`TerserPlugin should work with "file-loader": warnings 1`] = `Array []`;

exports[`TerserPlugin should write stdout and stderr of workers to stdout and stderr of main process in not parallel mode: assets 1`] = `
Object {
  "one.js": "",
  "two.js": "",
}
`;

exports[`TerserPlugin should write stdout and stderr of workers to stdout and stderr of main process in not parallel mode: errors 1`] = `Array []`;

exports[`TerserPlugin should write stdout and stderr of workers to stdout and stderr of main process in not parallel mode: process stderr output 1`] = `
"stderr
stderr
"
`;

exports[`TerserPlugin should write stdout and stderr of workers to stdout and stderr of main process in not parallel mode: process stdout output 1`] = `
"stdout
stdout
"
`;

exports[`TerserPlugin should write stdout and stderr of workers to stdout and stderr of main process in not parallel mode: warnings 1`] = `Array []`;

exports[`TerserPlugin should write stdout and stderr of workers to stdout and stderr of main process in parallel mode: assets 1`] = `
Object {
  "one.js": "",
  "two.js": "",
}
`;

exports[`TerserPlugin should write stdout and stderr of workers to stdout and stderr of main process in parallel mode: errors 1`] = `Array []`;

exports[`TerserPlugin should write stdout and stderr of workers to stdout and stderr of main process in parallel mode: process stderr output 1`] = `
"stderr
stderr
"
`;

exports[`TerserPlugin should write stdout and stderr of workers to stdout and stderr of main process in parallel mode: process stdout output 1`] = `
"stdout
stdout
"
`;

exports[`TerserPlugin should write stdout and stderr of workers to stdout and stderr of main process in parallel mode: warnings 1`] = `Array []`;
